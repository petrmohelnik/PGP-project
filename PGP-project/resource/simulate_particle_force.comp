#version 430

#define PI 3.141592

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct ParticlePool {
	vec4 pos; //w = ttl
	vec4 velocity; //w=density
	vec4 force; //w=pressure
};

struct GridList {
	uint particle_id;
	float cell_id;
};

struct StartIndexList {
	uint start;
};

layout(std430, binding = 5) buffer gridBuffer{
    GridList grid[];
};

layout(std430, binding = 6) buffer startIndexBuffer{
    StartIndexList startIndex[];
};

layout(std430, binding = 8) buffer particleSortedBuffer{
    ParticlePool particleSorted[];
};

uniform uint maxParticles;
uniform float h;
uniform uint gridMaxIndex;
uniform uint gridSize;
uniform float mass;
uniform float viscosity;

vec3 wGradientSpiky(vec3 r)
{
	float abs_r = length(r);
	if(abs_r >= 0 && abs_r <= h)
	{
		return -(45.0/(PI*pow(h,6)))*pow(h-abs_r,2)*(r/abs_r);
	}
	else
		return vec3(0.0, 0.0, 0.0);
}

float wLaplacianViscosity(vec3 r)
{
	float abs_r = length(r);
	if(abs_r >= 0 && abs_r <= h)
	{
		return (45.0/(PI*pow(h,6)))*(h-abs_r);
	}
	else
		return 0.0;
}

vec3 force(int cellId, int id)
{
	uint i = 0;
	ParticlePool p_i = particleSorted[id];
	vec3 forc = vec3(0.0, 0.0, 0.0);
	int gridSize2 = int(gridSize*gridSize);
	const int indices[26] = {
		cellId - 1 - int(gridSize) - gridSize2,
		cellId     - int(gridSize) - gridSize2,
		cellId + 1 - int(gridSize) - gridSize2,
		cellId - 1                 - gridSize2,
		cellId                     - gridSize2,
		cellId + 1                 - gridSize2,
		cellId - 1 + int(gridSize) - gridSize2,
		cellId     + int(gridSize) - gridSize2,
		cellId + 1 + int(gridSize) - gridSize2,
		cellId - 1 - int(gridSize),
		cellId     - int(gridSize),
		cellId + 1 - int(gridSize),
		cellId - 1,
		cellId + 1,
		cellId - 1 + int(gridSize),
		cellId     + int(gridSize),
		cellId + 1 + int(gridSize),
		cellId - 1 - int(gridSize) + gridSize2,
		cellId     - int(gridSize) + gridSize2,
		cellId + 1 - int(gridSize) + gridSize2,
		cellId - 1                 + gridSize2,
		cellId                     + gridSize2,
		cellId + 1                 + gridSize2,
		cellId - 1 + int(gridSize) + gridSize2,
		cellId     + int(gridSize) + gridSize2,
		cellId + 1 + int(gridSize) + gridSize2,
	};

	//prvni bunka
	i = startIndex[cellId].start;
	while(int(grid[i].cell_id) == cellId) {
		if(i != id) {
			ParticlePool p_j = particleSorted[i];
			if(p_j.velocity.w != 0.0)
			{
				forc -= mass * ((p_i.force.w + p_j.force.w) / (2.0 * p_j.velocity.w)) * wGradientSpiky(p_i.pos.xyz - p_j.pos.xyz);
				forc += viscosity * mass * ((p_j.velocity.xyz - p_i.velocity.xyz) / p_j.velocity.w) * wLaplacianViscosity(p_i.pos.xyz - p_j.pos.xyz);
			}
		}
		i++;
		if(i > maxParticles)
			break;
	}

	//dalsi bunky
	for(int c = 0; c < 26; c++)
	{
		int index = indices[c];
		if(index >= 0 && index < gridMaxIndex) {
			i = startIndex[index].start;

			if(i != 8388608) {
				while(int(grid[i].cell_id) == index) {
					ParticlePool p_j = particleSorted[i];
					if(p_j.velocity.w != 0.0) 
					{
						forc -= (mass * ((p_i.force.w + p_j.force.w) / (2.0 * p_j.velocity.w)) * wGradientSpiky(p_i.pos.xyz - p_j.pos.xyz));
						forc += viscosity * mass * ((p_j.velocity.xyz - p_i.velocity.xyz) / p_j.velocity.w) * wLaplacianViscosity(p_i.pos.xyz - p_j.pos.xyz);
					}
					i++;
					if(i >= maxParticles)
						break;
				}
			}
		}
	}

	return forc;
}

void main()
{
    uint id = gl_GlobalInvocationID.x;
	if(id < maxParticles)
	{
		particleSorted[id].force.xyz = force(int(grid[id].cell_id), int(id));
	}
}