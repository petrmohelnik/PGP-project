#version 430

#define PI 3.141592

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct ParticlePool {
	vec4 pos; //w = ttl
	vec4 velocity; //w=density
	vec4 force; //w=pressure
};

struct DeadList {
	unsigned int index;
};

layout(std430, binding = 0) buffer particleBuffer{
    ParticlePool particle[];
};

layout(std430, binding = 2) buffer deadBuffer{
    DeadList dead[];
};

layout(binding = 4, offset = 0) uniform atomic_uint deadCounter;

struct GridList {
	uint particle_id;
	float cell_id;
};

layout(std430, binding = 5) buffer gridBuffer{
    GridList grid[];
};

layout(std430, binding = 8) buffer particleSortedBuffer{
    ParticlePool particleSorted[];
};

uniform float dt;
uniform uint maxParticles;
uniform float gravity;
uniform float buoyancy;
uniform float restDensity;
uniform float time;

vec3 getWindDir(){
	float angle = (0.5-sin(time*.25))*6.28;
	return vec3(sin(angle), cos(angle - 3.14), cos(angle));
}

void main()
{
    uint id = gl_GlobalInvocationID.x;
	if(id < maxParticles)
	{
		GridList p = grid[id];
		//particle[p.particle_id] = particleSorted[id];
		ParticlePool particle_id = particleSorted[id];

		vec4 posTtl = particle_id.pos;
		vec3 pos = posTtl.xyz;
		float ttl = posTtl.w;

		if(ttl > 0.0) {
			ttl -= dt;

			if(ttl <= 0.0) {
				uint c = atomicCounterDecrement(deadCounter);
				dead[c].index = p.particle_id;
				particle_id.pos.w = ttl;
			} else {

				//buoyancy
				particle_id.force.xyz += buoyancy * (particle_id.velocity.w - restDensity) * vec3(0.0, gravity, 0.0);
				particle_id.force.xyz += 0.1 * getWindDir();
				//particle_id.force.xyz += particle_id.velocity.w * vec3(0.0, gravity, 0.0);
				vec3 a = vec3(0.0,0.0,0.0);
				if(particle_id.velocity.w != 0.0) 
					a += particle_id.force.xyz / particle_id.velocity.w;
				
				particle_id.velocity.xyz = particle_id.velocity.xyz + a * dt;
				particle_id.pos.xyz = pos + particle_id.velocity.xyz * dt;

				//kolize s koulema
				if(distance(particle_id.pos.xyz, vec3(1.0, 1.5, 0.5)) < 0.3) {
					vec3 n = normalize(particle_id.pos.xyz - vec3(1.0, 1.5, 0.5));
					particle_id.pos.xyz = vec3(1.0, 1.5, 0.5) + 0.3 * n;
					particle_id.velocity.xyz = particle_id.velocity.xyz - 1*dot(particle_id.velocity.xyz, n) * n;
				}
				if(distance(particle_id.pos.xyz,vec3(-0.7f, 0.7f, 0.2f)) < 0.3) {
					vec3 n = normalize(particle_id.pos.xyz - vec3(-0.7f, 0.7f, 0.2f));
					particle_id.pos.xyz = vec3(-0.7f, 0.7f, 0.2f) + 0.3 * n;
					particle_id.velocity.xyz = particle_id.velocity.xyz - 1*dot(particle_id.velocity.xyz, n) * n;
				}
				if(distance(particle_id.pos.xyz, vec3(0.2f, 1.0f, -0.7f)) < 0.3) {
					vec3 n = normalize(particle_id.pos.xyz - vec3(0.2f, 1.0f, -0.7f));
					particle_id.pos.xyz = vec3(0.2f, 1.0f, -0.7f) + 0.3 * n;
					particle_id.velocity.xyz = particle_id.velocity.xyz - 1*dot(particle_id.velocity.xyz, n) * n;
				}
				if(distance(particle_id.pos.xyz, vec3(0.0f, 2.5f, 0.0f)) < 0.3) {
					vec3 n = normalize(particle_id.pos.xyz - vec3(0.0f, 2.5f, 0.0f));
					particle_id.pos.xyz = vec3(0.0f, 2.5f, 0.0f) + 0.3 * n;
					particle_id.velocity.xyz = particle_id.velocity.xyz - 1*dot(particle_id.velocity.xyz, n) * n;
				}
					
				//kolize s bounding boxem
				if(particle_id.pos.x > 1.5) {
					particle_id.pos.x = 1.5;
					vec3 n = vec3(-1.0,0.0,0.0);
					particle_id.velocity.xyz = particle_id.velocity.xyz - 1*dot(particle_id.velocity.xyz, n) * n;
				}
				if(particle_id.pos.x < -1.5) {
					particle_id.pos.x = -1.5;
					vec3 n = vec3(1.0,0.0,0.0);
					particle_id.velocity.xyz = particle_id.velocity.xyz - 1*dot(particle_id.velocity.xyz, n) * n;
				}
				if(particle_id.pos.y > 3.0) {
					particle_id.pos.y = 3.0;
					vec3 n = vec3(0.0,-1.0,0.0);
					particle_id.velocity.xyz = particle_id.velocity.xyz - 1*dot(particle_id.velocity.xyz, n) * n;
				}
				if(particle_id.pos.y < 0.0) {
					particle_id.pos.y = 0.0;
					vec3 n = vec3(0.0,1.0,0.0);
					particle_id.velocity.xyz = particle_id.velocity.xyz - 1*dot(particle_id.velocity.xyz, n) * n;
				}
				if(particle_id.pos.z > 1.5) {
					particle_id.pos.z = 1.5;
					vec3 n = vec3(0.0,0.0,-1.0);
					particle_id.velocity.xyz = particle_id.velocity.xyz - 1*dot(particle_id.velocity.xyz, n) * n;
				}
				if(particle_id.pos.z < -1.5) {
					particle_id.pos.z = -1.5;
					vec3 n = vec3(0.0,0.0,1.0);
					particle_id.velocity.xyz = particle_id.velocity.xyz - 1*dot(particle_id.velocity.xyz, n) * n;
				}
					

			//	particle[p.particle_id].pos.xyz = pos + vec3(0.1, 0.1, 0.1) * dt;
				particle_id.pos.w = ttl;
			}
			particle[p.particle_id] = particle_id;
		}
	}
}