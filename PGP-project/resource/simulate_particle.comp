#version 450

#define PI 3.141592

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct ParticlePool {
	vec4 pos; //w = ttl
	vec4 velocity; //w=density
	vec4 force; //w=pressure
};

struct SortList {
	unsigned int index;
	float distance;
};

struct DeadList {
	unsigned int index;
};

layout(std430, binding = 0) buffer particleBuffer{
    ParticlePool particle[];
};

layout(std430, binding = 1) buffer sortBuffer{
    SortList sort[];
};

layout(std430, binding = 2) buffer deadBuffer{
    DeadList dead[];
};

layout(binding = 3, offset = 0) uniform atomic_uint sortCounter;
layout(binding = 4, offset = 0) uniform atomic_uint deadCounter;

struct GridList {
	uint particle_id;
	float cell_id;
};

struct StartIndexList {
	uint start;
};

layout(std430, binding = 5) buffer gridBuffer{
    GridList grid[];
};

layout(std430, binding = 6) buffer startIndexBuffer{
    StartIndexList startIndex[];
};

uniform float dt;
uniform vec3 halfVector;
uniform uint maxParticles;
uniform float h;
uniform uint gridMaxIndex;
uniform uint gridSize;

float wPoly6(vec3 r)
{
	float abs_r = length(r);
	if(abs_r >= 0 && abs_r <= h)
	{
		return (315.0/(64*PI*pow(h,9)))*pow(h*h-abs_r*abs_r,3);
	}
	else
		return 0.0;
}

float wSpiky(vec3 r)
{
	float abs_r = length(r);
	if(abs_r >= 0 && abs_r <= h)
	{
		return (15.0/(PI*pow(h,6)))*pow(h-abs_r,3);
	}
	else
		return 0.0;
}

float wViscosity(vec3 r)
{
	float abs_r = length(r);
	if(abs_r >= 0 && abs_r <= h)
	{
		return (15.0/(2*PI*pow(h,3)))*(-(pow(abs_r,3)/(2*pow(h,3))) + (abs_r*abs_r)/(h*h) + h/(2*abs_r) - 1.0);
	}
	else
		return 0.0;
}

void main()
{
    uint id = gl_GlobalInvocationID.x;
	if(id < maxParticles)
	{
		GridList p = grid[id];
		vec4 posTtl = particle[p.particle_id].pos;
		vec3 pos = posTtl.xyz;
		float ttl = posTtl.w;

		if(ttl > 0.0) {
			ttl -= dt;

			if(ttl <= 0.0) {
				uint c = atomicCounterDecrement(deadCounter);
				dead[c].index = p.particle_id;
				particle[p.particle_id].pos.w = ttl;
			} else {
				uint c = atomicCounterIncrement(sortCounter);
				sort[c].index = p.particle_id;
				sort[c].distance = dot(halfVector, pos);

				particle[p.particle_id].pos.xyz = pos + vec3(0.1, 0.1, 0.1) * dt;
				particle[p.particle_id].pos.w = ttl;
			}
		}
	}
}