#version 450

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct ParticlePool {
	vec4 pos; //w = ttl
	vec4 velocity; //w=density
	vec4 force; //w=pressure
};

struct DeadList {
	unsigned int index;
};

struct GridList {
	uint particle_id;
	float cell_id;
};

struct StartIndexList {
	uint start;
};

layout(std430, binding = 0) buffer particleBuffer{
    ParticlePool particle[];
};

layout(std430, binding = 2) buffer deadBuffer{
    DeadList dead[];
};

layout(binding = 4, offset = 0) uniform atomic_uint deadCounter;

layout(std430, binding = 5) buffer gridBuffer{
    GridList grid[];
};

layout(std430, binding = 6) buffer startIndexBuffer{
    StartIndexList startIndex[];
};

layout(binding = 7, offset = 0) uniform atomic_uint gridCounter;

uniform float size;
uniform float h;
uniform uint maxParticles;

void main()
{
    uint id = gl_GlobalInvocationID.x;
	if(id < maxParticles)
	{
		ParticlePool part = particle[id];
		vec3 pos = part.pos.xyz;
		float ttl = part.pos.w;

		if(ttl > 0.0 && part.velocity.w != 0.0) {
			uint res = uint(size / h);
			float halfSize = size / 2.0;
			if(abs(pos.x) <= halfSize && pos.y <= size && pos.y >= 0.0 && abs(pos.z) <= halfSize) {
				uint c = atomicCounterIncrement(gridCounter);
				grid[c].cell_id = float(floor((pos.x + halfSize) / h) + floor(pos.y / h) * res + floor((pos.z + halfSize) / h) * res * res);
				grid[c].particle_id = id;
			}
			else {
				uint c = atomicCounterDecrement(deadCounter);
				dead[c].index = id;
				particle[id].pos.w = -1.0;
			}
		}
	}
	if(id < uint(pow(size / h, 3)))
	{
		startIndex[id].start = 8388608;
	}
}