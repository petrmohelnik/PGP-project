#version 450

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct SortList {
	unsigned int index;
	float distance;
};

layout(std430, binding = 1) buffer sortBuffer{
    SortList sort[];
};

uniform uint numParticles;
uniform uint compareDist;
uniform uint subArraySize;

void main()
{
    uint id = gl_GlobalInvocationID.x;
	uint index_low = id & (compareDist - 1);
	uint index_high = 2 * (id - index_low);
	uint index = index_high + index_low;
	uint nSwapElem = compareDist == subArraySize >> 1 ? index_high + (2 * compareDist - 1) - index_low : index_high + compareDist + index_low;

	if(nSwapElem < numParticles && index < numParticles)
	{
		float nSwapElemDist, indexDist;
		if((indexDist = sort[index].distance) < (nSwapElemDist = sort[nSwapElem].distance))
		{
			uint tempIndex = sort[index].index;
			float tempDist = indexDist;

			sort[index].index = sort[nSwapElem].index;
			sort[index].distance = nSwapElemDist;

			sort[nSwapElem].index = tempIndex;
			sort[nSwapElem].distance = tempDist;
		}
	}
}


/*void main()
{
    uint id = gl_GlobalInvocationID.x;
	uint swapId = id^compareDist;

	if(id < swapId && id < numParticles && swapId < numParticles)
	{
		float tempDist = sort[id].distance;
		float tempDistSwap = sort[swapId].distance;
		uint ascending = (id / subArraySize) % 2;

		if((ascending == 0 && tempDist < tempDistSwap) || (ascending != 0 && tempDist > tempDistSwap))
		{
			uint tempIndex = sort[id].index;

			sort[id].index = sort[swapId].index;
			sort[id].distance = tempDistSwap;

			sort[swapId].index = tempIndex;
			sort[swapId].distance = tempDist;
		}
	}
}*/

/*void main()
{
    uint id = gl_GlobalInvocationID.x;
	uint swapId = id^compareDist;

	if(id < numParticles && swapId < numParticles)
	{
		uint ascending = (id / subArraySize) % 2;
		bool left = id < swapId;
		float leftDist = left ? sort[id].distance : sort[swapId].distance;
		float rightDist = left ? sort[swapId].distance : sort[id].distance;

		if((ascending == 0 && leftDist < rightDist) || (ascending != 0 && leftDist > rightDist))
		{
			uint tempIndexSwap = sort[swapId].index;
			float tempDistSwap = left ? rightDist : leftDist;

			barrier();

			sort[id].index = tempIndexSwap;
			sort[id].distance = tempDistSwap;
		}
	}
}*/