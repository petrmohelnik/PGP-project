#version 430

#define workGroupSize 512

layout(local_size_x = workGroupSize, local_size_y = 1, local_size_z = 1) in;

struct SortList {
	unsigned int index;
	float distance;
};

shared SortList localSort[workGroupSize];

layout(std430, binding = 1) buffer sortBuffer{
    SortList sort[];
};

uniform uint numParticles;

void main()
{
	uint global_id = gl_GlobalInvocationID.x;
	uint local_id = gl_LocalInvocationID.x;

	localSort[local_id] = sort[global_id];

	for (unsigned int subArraySize = 2; subArraySize <= workGroupSize; subArraySize <<= 1) {
		bool direction = (numParticles / subArraySize) % 2 == 0 || numParticles == subArraySize ? (subArraySize & global_id) != 0 : (subArraySize & global_id) == 0;

		for (unsigned int compareDist = subArraySize >> 1; compareDist > 0; compareDist >>= 1) {
			uint j = local_id ^ compareDist;

			barrier();
			SortList x0 = localSort[local_id];
			SortList x1 = localSort[j];

			bool smaller = (x1.distance < x0.distance) || ( x1.distance == x0.distance && j < local_id );
			bool swap = bool(int(smaller) ^ int(j < local_id) ^ int(direction));

			barrier();
			if(global_id < numParticles && (j + (gl_WorkGroupID.x * workGroupSize)) < numParticles)
			{
				localSort[local_id] = (swap) ? x1 : x0;
			}
		}
	}

	barrier();
	sort[global_id] = localSort[local_id];
}