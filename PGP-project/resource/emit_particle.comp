#version 450

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct ParticlePool {
	vec4 pos; //w = ttl
	vec4 velocity; //w=density
	vec4 force; //w=pressure
};

struct DeadList {
	unsigned int index;
};

layout(std430, binding = 0) buffer particleBuffer{
    ParticlePool particle[];
};

layout(std430, binding = 2) buffer deadBuffer{
    DeadList dead[];
};

layout(binding = 4, offset = 0) uniform atomic_uint deadCounter;

float rand(vec2 co){
  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

uniform uint maxEmit;

void main()
{
	uint id = gl_GlobalInvocationID.x;
	if(id < maxEmit)
	{
		uint c = atomicCounterIncrement(deadCounter);
		uint i = dead[c].index;
		int sqrt3 = int(pow(maxEmit, 0.333333));
		int sqrt2 = sqrt3 * sqrt3;
		particle[i].pos.xyz = vec3(float(id % sqrt3) * 0.04 - (sqrt3 * 0.02), (float(id % sqrt2) / sqrt3) * 0.04 + 0.6, float(id / sqrt2) * 0.04 - (sqrt3 * 0.02));
		particle[i].velocity.xyzw = vec4(0.0,0.2,0.0,1.0);
		//particle[i].pos.xyz = vec3(rand(vec2(id++,c++)) * 1.4 - 0.7, rand(vec2(id++,c++)) * 1.4 + 0.5, rand(vec2(id++,c++)) * 1.4 - 0.7);
		//particle[i].velocity.xyz = vec3(rand(vec2(id++,c++)), rand(vec2(id++,c++)), rand(vec2(id++,c++)));
		//particle[i].pos.xyz = particle[i].pos.xyz - vec3(0.1, 0.1, 0.1);
		particle[i].pos.w = 100000.0;
	}
}