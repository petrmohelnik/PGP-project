#version 450

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct ParticlePool {
	vec4 pos;
};

struct DeadList {
	unsigned int index;
};

layout(std430, binding = 0) buffer particleBuffer{
    ParticlePool particle[];
};

layout(std430, binding = 2) buffer deadBuffer{
    DeadList dead[];
};

layout(binding = 4, offset = 0) uniform atomic_uint deadCounter;

float rand(vec2 co){
  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

uniform uint maxEmit;

void main()
{
	float id = gl_GlobalInvocationID.x;
	if(id < maxEmit)
	{
		uint c = atomicCounterIncrement(deadCounter);
		uint i = dead[c].index;
		particle[i].pos.xyz = particle[i].pos.xyz - vec3(1.0, 1.0, 1.0);
		particle[i].pos.w = 1.0;
	}
}